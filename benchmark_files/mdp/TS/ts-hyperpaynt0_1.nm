mdp

const int n1 = 1;
const int n2 = 0;

module thread_scheduling

	h : [0..n1];
    l : [0..2];
    f1 : [0..1]; // termination of the first thread
    f2 : [0..1]; // termination of the second thread


    // both threads are not terminated yet
    [a]  (h>0)&(f2=0)  -> 1/2  : (h'=h-1) + 1/2 : (l'=2)&(f2'=1);
    [b]  (h=0)&(f1=0)&(f2=0)  -> 1/2  : (l'=1)&(f1'=1)   + 1/2 : (l'=2)&(f2'=1);

    // alternative scheduling policy of an attacker
    [c]  (h>0)&(f2=0)  -> 2/3   : (h'=h-1) + 1/3 : (l'=2)&(f2'=1);
    [d]  (h=0)&(f1=0)&(f2=0)  -> 2/3   : (l'=1)&(f1'=1)   + 1/3 : (l'=2)&(f2'=1);

    // second thread is terminated
    [] (h>0)&(f2=1) -> (h'=h-1);
    [] (h=0)&(f1=0)&(f2=1) -> (l'=1)&(f1'=1);

    // first thread is terminated
    [] (f1=1)&(f2=0) -> (l'=2)&(f2'=1);

    //both threads are terminated
    [] (f1=1)&(f2=1) -> true;

endmodule
// we have two initial states
init (l=0)&(f1=0)&(f2=0)&(h=n1 | h=n2)  endinit

label "l1" = (l=1)&(f1=1)&(f2=1); // l == 1 on termination
label "l2" = (l=2)&(f1=1)&(f2=1); // l == 2 on termination