mdp

const int n = 2;

module secret_thread1

    h1  : [0..n]; 
        pc1 : [0..1];
        c1  : [0..2*n];
        e1  : [0..1];
        a1  : [0..1];

        []  (h1>0)&(pc1=0)&(c1<2*n)&(a1=0)&(e1=0) -> 1/2 : (h1'=h1-1)&(pc1'=1)  + 1/2 : (c1'=c1+1); 
        //[]  (h1>0)&(pc1=0)&(c1<n)&(a1=0)&(e1=0) -> 1/2 : (h1'=h1-1)&(pc1'=0)  + 1/2 : (c1'=c1+1);
        []  (pc1=1)&(c1<2*n)&(a1=0)               -> 1/2 : (pc1'=0)&(e1' =1)    + 1/2 : (c1'=c1+1);
        []  (pc1=1)&(c1<2*n)&(a1=0)               -> 1/2 : (pc1'=0)             + 1/2 : (c1'=c1+1);
        []  (h1=0)&(pc1=0)&(c1<2*n)&(e1=0)&(a1=0) -> 1/2 : (e1' =1)             + 1/2 : (c1'=c1+1);

        []  (h1>0)&(pc1=0)&(c1=2*n)&(a1=0)&(e1=0) -> (h1'=h1-1)&(pc1'=1); 
        []  (pc1=1)&(c1=2*n)&(a1=0)               -> (pc1'=0);    
        []  (pc1=1)&(c1=2*n)&(a1=0)               -> (pc1'=0)&(e1' =1);   
        []  (h1=0)&(pc1=0)&(c1=2*n)&(e1=0)&(a1=0) -> (e1' =1);
        []  (e1=1)&(a1=0)                       -> true;


        []  (h1>0)&(pc1=0)&(c1<2*n)&(a1=1)&(e1=0) -> 1/2 : (h1'=h1-1)&(pc1'=1)  + 1/2 : (c1'=c1+1); 
        //[]  (h1>0)&(pc1=0)&(c1<n)&(a1=1)&(e1=0) -> 1/2 : (h1'=h1-1)&(pc1'=0)  + 1/2 : (c1'=c1+1); 
        []  (pc1=1)&(c1<2*n)&(a1=1)               -> 1/2 : (pc1'=0)&(e1' =1)    + 1/2 : (c1'=c1+1);
        []  (pc1=1)&(c1<2*n)&(a1=1)               -> 1/2 : (pc1'=0)             + 1/2 : (c1'=c1+1);

        []  (h1=0)&(pc1=0)&(c1<2*n)&(e1=0)&(a1=1) -> 1/2 : (e1' =1)             + 1/2 : (c1'=c1+1);

        []  (h1>0)&(pc1=0)&(c1=2*n)&(a1=1)&(e1=0) -> (h1'=h1-1)&(pc1'=1); 
        []  (pc1=1)&(c1=2*n)&(a1=1)               -> (pc1'=0);     
        []  (pc1=1)&(c1=2*n)&(a1=1)               -> (pc1'=0)&(e1' =1);        
        []  (h1=0)&(pc1=0)&(c1=2*n)&(e1=0)&(a1=1) -> (e1' =1);
        []  (e1=1)&(a1=1)                         -> true;


endmodule

init  (e1=0)&(h1=n)&(pc1=0)&(c1=0)  endinit

label "start0" = (e1=0)&(h1=n)&(pc1=0)&(c1=0)&(a1=0);
label "start1" = (e1=0)&(h1=n)&(pc1=0)&(c1=0)&(a1=1);

label "counter0" = (c1=0)&(e1=1);
label "counter1" = (c1=1)&(e1=1);
label "counter2" = (c1=2)&(e1=1);
label "counter3" = (c1=3)&(e1=1);
label "counter4" = (c1=4)&(e1=1);
label "counter5" = (c1=5)&(e1=1);
label "counter6" = (c1=6)&(e1=1);
label "counter7" = (c1=7)&(e1=1);
label "counter8" = (c1=8)&(e1=1);



