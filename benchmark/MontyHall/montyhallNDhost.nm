mdp 


module montyhall

	state: [0..12];
	comp:  [0..4];
	
	[setprize]  (state=0)&(comp=0) -> 1/3 : (state'=1)&(comp'=1) + 1/3 : (state'=1)&(comp'=2)  + 1/3 : (state'=1)&(comp'=3) ;
	
	[playerChoiceO1]  (state=1)&(comp=1) -> 1/3:(state'=4)&(comp'=1) + 1/3:(state'=5)&(comp'=1) + 1/3:(state'=6)&(comp'=1);
	//[chooseD2]  (state=1)&(comp=1) -> (state'=5)&(comp'=1);
	//[chooseD3]  (state=1)&(comp=1) -> (state'=6)&(comp'=1);

	[playerChoiceO2]  (state=1)&(comp=2) -> 1/3:(state'=4)&(comp'=2) + 1/3:(state'=5)&(comp'=2) + 1/3:(state'=6)&(comp'=2);
	//[chooseD1]  (state=1)&(comp=2) -> (state'=4)&(comp'=2);
	//[chooseD2]  (state=1)&(comp=2) -> (state'=5)&(comp'=2);
	//[chooseD3]  (state=1)&(comp=2) -> (state'=6)&(comp'=2);
	
	[playerChoiceO3]  (state=1)&(comp=3) -> 1/3:(state'=4)&(comp'=3) + 1/3:(state'=5)&(comp'=3) + 1/3:(state'=6)&(comp'=3);
	//[chooseD1]  (state=1)&(comp=3) -> (state'=4)&(comp'=3);
	//[chooseD2]  (state=1)&(comp=3) -> (state'=5)&(comp'=3);
	//[chooseD3]  (state=1)&(comp=3) -> (state'=6)&(comp'=3);

	[hostChoice] (state=4)&(comp=1) -> 1/2:(state'=7)&(comp'=1) + 1/2:(state'=8)&(comp'=1);
	[hostChoice] (state=5)&(comp=1) -> (state'=9)&(comp'=1);
	[hostChoice] (state=6)&(comp=1) -> (state'=10)&(comp'=1);

	[hostChoice] (state=4)&(comp=2) -> (state'=7)&(comp'=2);
	[hostChoice] (state=5)&(comp=2) -> 1/2:(state'=8)&(comp'=2) + 1/2:(state'=9)&(comp'=2);
	[hostChoice] (state=6)&(comp=2) -> (state'=10)&(comp'=2);

	[hostChoice] (state=4)&(comp=3) -> (state'=7)&(comp'=3);
	[hostChoice] (state=5)&(comp=3) -> (state'=8)&(comp'=3);
	[hostChoice] (state=6)&(comp=3) -> 1/2:(state'=9)&(comp'=3) + 1/2:(state'=10)&(comp'=3);



	[keep]      (state=7)&(comp=1) -> (state'=12)&(comp'=4);
	//[switch]    (state=7)&(comp=1) -> (state'=11)&(comp'=4);
	[keep]      (state=8)&(comp=1) -> (state'=12)&(comp'=4);
	//[switch]    (state=8)&(comp=1) -> (state'=11)&(comp'=4);
	[keep]      (state=9)&(comp=1) -> (state'=11)&(comp'=4);
	//[switch]    (state=9)&(comp=1) -> (state'=12)&(comp'=4);
	[keep]      (state=10)&(comp=1) -> (state'=11)&(comp'=4);
	//[switch]    (state=10)&(comp=1) -> (state'=12)&(comp'=4);


	[keep]      (state=7)&(comp=2) -> (state'=11)&(comp'=4);
	[switch]    (state=7)&(comp=2) -> (state'=12)&(comp'=4);
	[keep]      (state=8)&(comp=2) -> (state'=12)&(comp'=4);
	[switch]    (state=8)&(comp=2) -> (state'=11)&(comp'=4);
	[keep]      (state=9)&(comp=2) -> (state'=12)&(comp'=4);
	[switch]    (state=9)&(comp=2) -> (state'=11)&(comp'=4);
	[keep]      (state=10)&(comp=2) -> (state'=11)&(comp'=4);
	[switch]    (state=10)&(comp=2) -> (state'=12)&(comp'=4);

	[keep]      (state=7)&(comp=3) -> (state'=11)&(comp'=4);
	[switch]    (state=7)&(comp=3) -> (state'=12)&(comp'=4);
	[keep]      (state=8)&(comp=3) -> (state'=11)&(comp'=4);
	[switch]    (state=8)&(comp=3) -> (state'=12)&(comp'=4);
	[keep]      (state=9)&(comp=3) -> (state'=12)&(comp'=4);
	[switch]    (state=9)&(comp=3) -> (state'=11)&(comp'=4);
	[keep]      (state=10)&(comp=3) -> (state'=12)&(comp'=4);
	[switch]    (state=10)&(comp=3) -> (state'=11)&(comp'=4);

	[loop]    (state=11)&(comp=4) -> true;
	[loop] 	  (state=12)&(comp=4) -> true;
 
endmodule

init (state=1)&(comp=1|comp=2|comp=3) endinit

label "start" = (state=0)&(comp=0);
label "CGG"   = (state=1)&(comp=1);
label "GCG"   = (state=1)&(comp=2);
label "GGC"   = (state=1)&(comp=3);
label "lose"  = (state=11);
label "win"   = (state=12);
label "end"   = ((state=11)|(state=12));

